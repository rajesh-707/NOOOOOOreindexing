pipeline {
    agent {
        node {
            label 'master'
        }

    }

    stages {

        stage('Scale RDS UP') {
            steps {
                script {
                    try {
                        sh "bash script.sh RDS ${db_instance_identifier} ${db_instance_class_scaleup}"
                        env.Stage_Name = "RDS_scale_up"

                      } catch (e) {
                         currentBuild.result = "FAILED"
                         // notifyFailed(env.Stage_Name)
                         throw e
                      }
                  }

            }
        }


        stage('Operations') {
          steps {
                  script {
                        try {
                          
                          sh "sleep 60"
                          sh "ssh ${host_name} bash -s < reindex.sh"
                          env.Stage_Name = "operation"

                          } catch (e) {
                             currentBuild.result = "FAILED"
                             // notifyFailed(env.Stage_Name)
                             throw e
                                }
                        }
                  }

       }

       stage('RDS_Scale_down') {
          steps {
               script {
                     try {
                       sh "bash script.sh RDS ${db_instance_identifier} ${db_instance_class_scaledown}"
                       env.Stage_Name = "RDS_Scale_down"
                       // notifySuccessful()

                       } catch (e) {
                          currentBuild.result = "FAILED"
                          // notifyFailed(env.Stage_Name)
                          throw e
                             }
                     }
                }

       }



    }
}


// Notify team about the status of the Build

def notifySuccessful()
{

emailext (
    subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
    body: """SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
       Check console output at "${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]""",
     attachLog: true,
      replyTo: 'rajesh.shisodiya@gspann.com',
      to: 'rajesh.shisodiya@gspann.com',
        )

}

def notifyFailed(Stage_Name)

{

emailext (
    subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] failed at ${Stage_Name}'",
    body: """FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] failed at ${Stage_Name}':
      Check console output at "${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]""",
     attachLog: true,
      replyTo: 'rajesh.shisodiya@gspann.com',
      to: 'rajesh.shisodiya@gspann.com',
  )

}


def notifyInput_requested()
{

emailext (
    subject: "INPUT REQUESTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
    body: """INPUT REQUESTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
       Waiting for the input , Check console output at "${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]""",
     attachLog: true,
      replyTo: 'rajesh.shisodiya@gspann.com',
      to: 'rajesh.shisodiya@gspann.com',
        )

}
